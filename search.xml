<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JSP总结上</title>
      <link href="/2019/11/06/jsp-zong-jie-shang/"/>
      <url>/2019/11/06/jsp-zong-jie-shang/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP总结上"><a href="#JSP总结上" class="headerlink" title="JSP总结上"></a>JSP总结上</h1><h4 id="JSP-定义："><a href="#JSP-定义：" class="headerlink" title="JSP 定义："></a>JSP 定义：</h4><p>​    1)Java Server Page, Java EE 组件，本质上是 Servlet。</p><p>​    2)运行在 Web Container.接收 Http Request,生成 Http Response(默认协议是 Http 请求和响应) </p><p>​    3)JSP 使得我们能够分离页面的静态 HTML 和动态部分——我们需要的技术。</p><p>​    4)使页面可以混和html代码、Java代码以及JSP标签；允许访问组件</p><h5 id="Servlet的缺陷-JSP出现的原因-："><a href="#Servlet的缺陷-JSP出现的原因-：" class="headerlink" title="Servlet的缺陷(JSP出现的原因)："></a>Servlet的缺陷(JSP出现的原因)：</h5><p>​    1)写静态页面必须部署后才能看到效果，很难控制页面的外观。</p><p>​    2)从技术角度来说Servlet是Java代码和HTML静态代码的混合代码。</p><p>​    3)从市场竞争角度来说，微软推出了ASP产品。</p><h4 id="JSP的改进："><a href="#JSP的改进：" class="headerlink" title="JSP的改进："></a>JSP的改进：</h4><p>​    1)JSP是标签式的文本文件(Servlet是Java文件) </p><p>​    2)JSP不需要编译(其实是由服务器监测JSP文件的变化，再将其翻译成 Servlet 代码) </p><p>​      服务器对其进行编译并在第一次请求时创建一个Servlet实例。所以，第一次访问JSP页面时会后延迟</p><p>​    3)JSP不用写配置文件</p><p>​    4)JSP以静态代码为主，Java代码为辅。Servlet反之。</p><p>​    5)是J2EE蓝图的一部分(Servlet、JSP以及EJB是J2EE的三大组件) </p><p>​    JSP从本质上来说内核还是Servlet，但与Servlet不是替代关系而是一种互补的关系。</p><p>​    JSP适合于写显示层的动态页面，而Servlet则适合写控制层的业务控制(页面转发)。</p><p>​    JSP往纯标签方向发展，Servlet往纯代码方向发展，他们以Servlet内核(请求响应式的工作方式)往两个方向发展。</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>一、JSP的声明(statement) </p><p>   用来定义在产生的类文件中的类的属性和方法(成员变量)。可声明类(即是内部类)。</p><p>   由于servlet是工作在多线程环境下，所以尽量不要在service方法体外声明成员变量。</p><p>   &lt;%!…..%&gt;  //声明时要加”!”，属于类成员，最先加载，可写于任何位置；不加则是脚本的局部变量，必须调用前写。</p><p>   如：  &lt;%!String hello=”Hello, World!”;%&gt;  //变量的声明</p><p>​        &lt;%=hello%&gt;   //变量的调用</p><p>​        &lt;%! private int counter=0;  public int count(){ return ++counter;} %&gt; //函数的声明</p><p>​        <h1>&lt;%=count()%&gt;</h1> //函数的调用</p><h4 id="声明规则："><a href="#声明规则：" class="headerlink" title="声明规则："></a>声明规则：</h4><p>​    1) JSP中声明的变量和方法对应于Servlet中的实例方法和实例变量。这些将被同时请求该页面的所有用户所共享;</p><p>​    2) 在使用变量或方法前须先定义(不是说声明变量的位置在页面中要处于使用变量的前面，而是指变量不声明不能使用);</p><p>​    3) 声明的变量或方法的作用域为当前页面或包含的页面;</p><p>​    4) 语句间以分号分隔。</p><h3 id="二、JSP代码段-Scriptlet"><a href="#二、JSP代码段-Scriptlet" class="headerlink" title="二、JSP代码段(Scriptlet)"></a>二、JSP代码段(Scriptlet)</h3><p>​      &lt;% java代码 %&gt; </p><p>   是一段可以在处理请求时间执行的Java代码。可以产生输出，也可以是一些流程控制语句。</p><p>   在代码段中定义的变量为service方法中的局部变量。</p><h5 id="1-jspService-中的局部代码："><a href="#1-jspService-中的局部代码：" class="headerlink" title="1._jspService()中的局部代码："></a>1._jspService()中的局部代码：</h5><p>​      &lt;%  System.out.println(“Hi,I like JSP.”); %&gt;   //在控制台打印出，网页上没显示</p><p>​      &lt;%  out.println(“Hi,I like JSP.”); %&gt;          //打印在网页上</p><p>​      &lt;%  Connection conn=DriverManager.getConnection();  Statement st=conn.createStatement();</p><p>​        String sql=”select * from users”;               ResultSet rs=st.executeQuery(sql);</p><p>​         //……</p><p>​       %&gt;</p><p>​    问：能否在JSP脚本里定义方法？</p><p>​    答：不能！ //脚本相当于方法，不能在方法里定义方法</p><p>​       &lt;%!public void helloworld(){}%&gt;  //可以声明方法</p><p>​       &lt;% public void helloworld(){}%&gt;  //编译出错；脚本不能定义方法</p><h5 id="2-比较"><a href="#2-比较" class="headerlink" title="2.比较:"></a>2.比较:</h5><p>​        &lt;%! int i=100;%&gt;     //成员变量</p><p>​        &lt;%  int i=101;%&gt;     //_jspService()方法中的局部变量</p><p>​        &lt;%=i%&gt;  //同一文件里，局部变量优先</p><h5 id="3-脚本小程序规则："><a href="#3-脚本小程序规则：" class="headerlink" title="3.脚本小程序规则："></a>3.脚本小程序规则：</h5><p>​     1) 你使用的脚本语言决定了脚本小程序的规则;</p><p>​     2) 语句间以分号分隔;</p><p>​     3) 可以使用默认的对象、import进的类、declaration声明的方法和对象以及useBean tag中声明的对象。</p><h3 id="三、JSP表达式-expression"><a href="#三、JSP表达式-expression" class="headerlink" title="三、JSP表达式(expression)"></a>三、JSP表达式(expression)</h3><p>​       &lt;%=……%&gt;   // “=”号</p><p>   在JSP请求处理阶段计算他的值，表达式生成的代码是Service方法中的一个代码片断。</p><p>   JSP对于声明的处理：1、计算表达式的值</p><p>​                   2、将值转换成String</p><p>​                   3、用out.println发送标签；把数据输出至页面的当前位置</p><p>​      &lt;%=”Hello,JSP world!”%&gt;     //out.println(“Hello,JSP world”);</p><p>​      &lt;%=name%&gt;                   //&lt;%!String name=”GiGi”;%&gt; out.println(name);</p><p>​      &lt;%=new java.util.Date()%&gt;   //out.println(new java.util.Date());</p><p>   表达式规则： </p><p>​     1) 你使用的脚本语言决定了脚本小程序的规则;</p><p>​     2) 执行的顺序为从左到右;</p><p>​     3) 分号不能用于表达式。</p><h3 id="四、JSP指令-direction"><a href="#四、JSP指令-direction" class="headerlink" title="四、JSP指令(direction)"></a>四、JSP指令(direction)</h3><p>   指令用于从JSP发送信息到容器上。用来设置全局变量，声明类，要实现的方法和输出内容等。</p><p>   指令在JSP整个文件内有效。它为翻译阶段提供了全局信息。</p><p>​       &lt;%@……%&gt;  // “@”符号</p><p>   指令包括：page、include、taglib</p><h5 id="1-page指令"><a href="#1-page指令" class="headerlink" title="1.page指令"></a>1.page指令</h5><p>​    </p><pre class=" language-jsp"><code class="language-jsp">    import、session、errorPage、isThreadSafe</code></pre><p>​     页面的语言、内容类型、字符集、页面编码</p><p>​        </p><pre class=" language-jsp"><code class="language-jsp"><%@page language="java" contentType="text/html; charset=gbk" pageEncoding="gbk"%></code></pre><p>​        language：java唯一值，表示脚本中使用的编程语言</p><p>​        contentType：设置了内容的类型和静态页面的编码 (告诉浏览器以什么编码显示) </p><p>​        pageEncoding：页面本身的编码格式 (写页面时用的编码格式) </p><p>​        上面的代码等价于servlet里： response.setContentType(“text/html; charset=gbk”);</p><p>​     import：导入其他的包和类； 其中，JSP默认导入的包是java.lang.*</p><pre class=" language-jsp"><code class="language-jsp">     <%@page import="java.util.Date"%> //具体的包和类</code></pre><p>​      </p><pre class=" language-jsp"><code class="language-jsp">  <%@page import="java.sql.*"%>     //包下的所有类</code></pre><p>​      </p><pre class=" language-jsp"><code class="language-jsp">  <%@page import="java.util.*, java.io.*, java.net.*"%> //连写，逗号分隔</code></pre><p>​     Session：指示当前的jsp是否参与会话 (默认为true； 参与会话) </p><p>​        通过指令使当前页面与session不可会话：    &lt;%@page session=”false”%&gt; </p><p>​        session=”true”时，可用内建对象session直接访问会话，例如：</p><p>​        </p><pre class=" language-jsp"><code class="language-jsp"><%  session.setAttribute("username","maxwell");​            String name = (String)session.getAttribute("username"); %>​        <%=name%></code></pre><p>​     errorPage：</p><p>​        isErrorPage：Jsp页面中出现异常的处理方式</p><p>​        对于有可能出现异常的页面： </p><p>​            &lt;%@page errorPage=”error.jsp”%&gt; //异常时会跳转到处理异常的页面；这页面自己写</p><p>​            在有可能异常的地方打印原因：  throw new Exception(“数据库连接出错”);</p><p>​        对于处理异常的页面(error.jsp)里：</p><p>​           </p><pre class=" language-jsp"><code class="language-jsp"> <%@page isErrorPage="true"%>，其中使用<%=exception.getMessage() %>把异常信息打印出来​     isThreadSafe——此属性已经不再使用(已废弃) </code></pre><p>​        当前Jsp页面是否线程安全    default—&gt;true</p><p>​      </p><pre class=" language-jsp"><code class="language-jsp">  <%@page isThreadSafe="true"%>  //普通的Servlet,可以并发处理用户请求</code></pre><p>​       </p><pre class=" language-jsp"><code class="language-jsp"> <%@page isThreadSafe="false"%> //相当于Servlet实现了SingleThreadModel</code></pre><h5 id="2-include指令"><a href="#2-include指令" class="headerlink" title="2.include指令"></a>2.include指令</h5><p>​        把目标页面的内容包含到当前页面,产生页面叠加以后的输出效果 //相当于将两个页面合并；编译时就包含进来</p><p>​        &lt;%@include file=”foot.jsp”%&gt; //可插入任意位置</p><h5 id="3-taglib指令"><a href="#3-taglib指令" class="headerlink" title="3.taglib指令"></a>3.taglib指令</h5><p>​        留在JSTL里讲解。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JSP中的request,session,response对象以及其他对象</title>
      <link href="/2019/11/06/jsp-zhong-de-request-session-response-dui-xiang-yi-ji-qi-ta-dui-xiang/"/>
      <url>/2019/11/06/jsp-zhong-de-request-session-response-dui-xiang-yi-ji-qi-ta-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="JSP中的request-session-response对象以及其他对象"><a href="#JSP中的request-session-response对象以及其他对象" class="headerlink" title="JSP中的request,session,response对象以及其他对象"></a>JSP中的request,session,response对象以及其他对象</h2><h5 id="1-pageContext对象："><a href="#1-pageContext对象：" class="headerlink" title="1)pageContext对象："></a><font color="red">1)pageContext对象：</font></h5><p>​     <font color="green">每一个jsp页面对应着一个pageContext。一般地，在实际应用中，主要是使用它来存取属性。</font></p><p>​     另外，pageContext对象能够存取其他隐含对象。</p><pre><code>###### a.pageContext对象存取其他隐含对象属性的方法，此时需要指定范围的参数。</code></pre><p>​      <font color="red">Object getAttribute(String name, int scope)</font></p><p>​      <font color="red">Enumeration getAttributeNamesInScope(int scope)</font></p><p>​      <font color="red">void removeAttribute(String name, int scope)</font></p><p>​     <font color="red"> void setAttribute(String name, Object value, int scope)</font></p><p>​     其中，范围参数有四个，分别代表四种范围：</p><p>​      PAGE_SCOPE、REQUEST_SCOPE、SESSION_SCOPE、APPLICATION_SCOPE</p><pre><code>###### b.PageContext对象取得其他隐含对象的方法</code></pre><p>​      Exception getException()           回传目前网页的异常，不过此网页要为error page，</p><p>​      JspWriter getOut()                 回传目前网页的输出流，例如：out</p><p>​      Object getPage()                   回传目前网页的Servlet 实体(instance)，例如：page</p><p>​      ServletRequest getRequest()        回传目前网页的请求，例如：request</p><p>​      ServletResponse getResponse()      回传目前网页的响应，例如：response</p><p>​      ServletConfig getServletConfig()   回传目前此网页的ServletConfig 对象，例如：config</p><p>​      ServletContext getServletContext() 回传目前此网页的执行环境(context)，例如：application</p><p>​      HttpSession getSession()           回传和目前网页有联系的会话(session)，例如：session</p><pre><code>###### c.PageContext对象提供取得属性的方法</code></pre><p>​      Object getAttribute(String name, int scope)    回传name 属性(范围为scope；类型为Object) </p><p>​      Enumeration getAttributeNamesInScope(int scope)    </p><p>​                                       回传所有属性范围为scope 的属性名称，回传类型为Enumeration</p><p>​      int getAttributesScope(String name)回传属性名称为name 的属性范围</p><p>​      void removeAttribute(String name)  移除属性名称为name 的属性对象</p><p>​      void removeAttribute(String name, int scope)   移除属性名称为name，范围为scope 的属性对象</p><p>​      void setAttribute(String name, Object value, int scope)        </p><p>​                                       指定属性对象的名称为name、值为value、范围为scope</p><p>​      Object findAttribute(String name)  寻找在所有范围中属性名称为name 的属性对象</p><h6 id="2-request-对象"><a href="#2-request-对象" class="headerlink" title="2)request 对象"></a><font color="red">2)request 对象</font></h6><p>​     request 对象包含所有请求的信息，</p><p>​     如：请求的来源、标头、cookies和请求相关的参数值等等。</p><p>​     request 对象实现javax.servlet.http.HttpServletRequest接口的，</p><p>​     所提供的方法可以将它分为四大类：</p><pre><code> ###### &lt;font color=&quot;red&quot;&gt;(1)储存和取得属性方法;&lt;/font&gt;</code></pre><p>​      <font color="green">void setAttribute(String name, Object value)      设定name属性的值为value</font></p><p>​      <font color="green">Enumeration getAttributeNamesInScope(int scope)   取得所有scope 范围的属性</font></p><p>​      <font color="green">Object getAttribute(String name)   取得name 属性的值</font></p><p>​      <font color="green">void removeAttribute(String name)  移除name 属性的值</font></p><pre><code> ###### &lt;font color=&quot;red&quot;&gt;(2)取得请求参数的方法&lt;/font&gt;</code></pre><p>​      <font color="green">String getParameter(String name)   取得name 的参数值</font></p><p>​      <font color="green">Enumeration getParameterNames()    取得所有的参数名称</font></p><p>​      <font color="green">String [] getParameterValues(String name)    取得所有name 的参数值</font></p><p> <font color="green">Map getParameterMap()              取得一个要求参数的Map</font></p><pre><code> ##### &lt;font color=&quot;red&quot;&gt;(3)能够取得请求HTTP 标头的方法&lt;/font&gt;</code></pre><p>​      <font color="orage">String getHeader(String name)      取得name 的标头</font></p><p>​      <font color="orage">Enumeration getHeaderNames()       取得所有的标头名称</font></p><p>​      <font color="orage">Enumeration getHeaders(String name) 取得所有name 的标头</font></p><p>​      <font color="orage">int getIntHeader(String name)      取得整数类型name 的标头</font></p><p>​      <font color="orage">long getDateHeader(String name)    取得日期类型name 的标头</font></p><p>​     <font color="orage"> Cookie [] getCookies()             取得与请求有关的cookies</font></p><pre><code> ###### &lt;font color=&quot;red&quot;&gt;(4)其他的方法&lt;/font&gt;</code></pre><p>​      <font color="orage">String getContextPath()            取得Context 路径(即站台名称)</font></p><p>​       <font color="orage">String getMethod()                 取得HTTP 的方法(GET、POST)</font></p><p>​       <font color="orage">String getProtocol()               取得使用的协议 (HTTP/1.1、HTTP/1.0 )</font></p><p>​       <font color="orage">String getQueryString()            取得请求的参数字符串，不过，HTTP的方法必须为GET</font></p><p>​      <font color="orage"> String getRequestedSessionId()     取得用户端的Session ID</font></p><p>​      <font color="orage"> String getRequestURI()             取得请求的URL，但是不包括请求的参数字符串</font></p><p>​      <font color="orage"> String getRemoteAddr()             取得用户的IP 地址</font></p><p>​       <font color="orage">String getRemoteHost()             取得用户的主机名称</font></p><p>​      <font color="orage"> int getRemotePort()                取得用户的主机端口</font></p><p>​       <font color="orage">String getRemoteUser()             取得用户的名称</font></p><p>​       <font color="orage">void getCharacterEncoding(String encoding)    设定编码格式，用来解决窗体传递中文的问题</font></p><pre><code>#### 3)session 对象</code></pre><p>​     <font color="orage">session对象表示目前个别用户的会话(session)状况。</font></p><p>​    <font color="orage"> session对象实现javax.servlet.http.HttpSession接口，HttpSession接口所提供的方法</font></p><p>​      <font color="orage">long getCreationTime()             取得session产生的时间，单位是毫秒</font></p><p>​      <font color="orage">String getId()                     取得session 的ID</font></p><p>​      <font color="orage">long getLastAccessedTime()         取得用户最后通过这个session送出请求的时间</font></p><p>​      <font color="orage">long getMaxInactiveInterval()      取得最大session不活动的时间，若超过这时间，session 将会失效</font></p><p>​      <font color="orage">void invalidate()                  取消session 对象，并将对象存放的内容完全抛弃</font></p><p>​     <font color="orage"> boolean isNew()                    判断session 是否为”新”的会话</font></p><p>​      <font color="orage">void setMaxInactiveInterval(int interval)   </font></p><p>​                                       <font color="orage">设定最大session不活动的时间，若超过这时间，session 将会失效</font></p><pre><code>#### 4)application对象</code></pre><p>​     application对象最常被使用在存取环境的信息。</p><p>​     因为环境的信息通常都储存在ServletContext中，所以常利用application对象来存取ServletContext中的信息。</p><p>​     application 对象实现javax.servlet.ServletContext 接口，ServletContext接口容器所提供的方法</p><p>​      int getMajorVersion()              取得Container主要的Servlet API版本</p><p>​      int getMinorVersion()              取得Container次要的Servlet API 版本</p><p>​      String getServerInfo()             取得Container的名称和版本</p><p>​      String getMimeType(String file)    取得指定文件的MIME 类型</p><p>​      ServletContext getContext(String uripath)        取得指定Local URL的Application context</p><p>​      String getRealPath(String path)    取得本地端path的绝对路径</p><p>​      void log(String message)           将信息写入log文件中</p><p>​      void log(String message, Throwable throwable)    将stack trace 所产生的异常信息写入log文件中</p><p> 3.其他对象：</p><pre><code>#### 1)page 对象</code></pre><p>​     page对象代表JSP本身，更准确地说page对象是当前页面转换后的Servlet类的实例。</p><p>​     从转换后的Servlet类的代码中，可以看到这种关系： Object page = this;</p><p>​     在JSP页面中，很少使用page对象。</p><pre><code>#### 2)response 对象</code></pre><p>​     response 对象主要将JSP 处理数据后的结果传回到客户端。</p><p>​     response 对象是实现javax.servlet.http.HttpServletResponse 接口。response对象所提供的方法。</p><p>​    a.设定表头的方法</p><p>​      void addCookie(Cookie cookie)                新增cookie</p><p>​      void addDateHeader(String name, long date)   新增long类型的值到name标头</p><p>​      void addHeader(String name, String value)    新增String类型的值到name标头</p><p>​      void addIntHeader(String name, int value)    新增int类型的值到name标头</p><p>​      void setDateHeader(String name, long date)   指定long类型的值到name标头</p><p>​      void setHeader(String name, String value)    指定String类型的值到name标头</p><p>​      void setIntHeader(String name, int value)    指定int类型的值到name标头</p><p>​    b.设定响应状态码的方法</p><p>​      void sendError(int sc)                       传送状态码(status code)</p><p>​      void sendError(int sc, String msg)           传送状态码和错误信息</p><p>​      void setStatus(int sc)                       设定状态码</p><p>​    c.用来URL 重写(rewriting)的方法    </p><p>​      String encodeRedirectURL(String url)         对使用sendRedirect()方法的URL予以编码</p><pre><code>#### 3)out 对象</code></pre><p>​     out对象的类型是javax.servlet.jsp.JspWriter，该类从java.io.Writer类派生，以字符流的形式输出数据。</p><p>​     out对象实际上是PrintWriter对象的带缓冲的版本(在out对象内部使用PrintWriter对象来输出数据)，</p><p>​     可以通过page指令的buffer属性来调整缓冲区的大小，默认的缓冲区是8kb。</p><p>​     out 对象能把结果输出到网页上。</p><p>​     out主要是用来控制管理输出的缓冲区(buffer)和输出流(output stream)。</p><p>​      void clear( )               清除输出缓冲区的内容</p><p>​      void clearBuffer( )         清除输出缓冲区的内容</p><p>​      void close( )               关闭输出流，清除所有的内容</p><p>​      int getBufferSize( )        取得目前缓冲区的大小(KB)</p><p>​      int getRemaining( )         取得目前使用后还剩下的缓冲区大小(KB)</p><p>​      boolean isAutoFlush( )      回传true表示缓冲区满时会自动清除；false表示不会自动清除并且产生异常处理</p><pre><code>#### 4)exception对象</code></pre><p>​     若要使用exception 对象时，必须在page 指令中设定：&lt;%@ page isErrorPage=”true” %&gt;才能使用。</p><p>​     exception提供的三个方法：</p><p>​      getMessage() </p><p>​      getLocalizedMessage() </p><p>​      printStackTrace(new java.io.PrintWriter(out)) </p><p>​    5)config 对象</p><p>​     config 对象里存放着一些Servlet 初始的数据结构。</p><p>​     config 对象实现于javax.servlet.ServletConfig 接口，它共有下列四种方法：</p><p>​      public String getInitParameter(name)</p><p>​      public java.util.Enumeration getInitParameterNames( ) </p><p>​      public ServletContext getServletContext() </p><p>​      public Sring getServletName()</p><p>例子：</p><p>1.范围对象比较</p><pre class=" language-jsp"><code class="language-jsp"><% pageContext 或request 或session 或application.setAttribute("name", "maxwell");   pageContext.setAttribute("sex", "m");%></code></pre><p>2.输出对象out</p><pre class=" language-jsp"><code class="language-jsp"><%out.println("Hello JSP!");%></code></pre><pre class=" language-jsp"><code class="language-jsp"><%System.out.println("Hello JSP!");%></code></pre><p>getBufferSize() //tomcat default:12k</p><p>getRemaining()</p><p>flush()</p><p>clearBuffer()</p><p>3.request对象</p><p>request:</p><p>getProtocol()</p><p>getMethod()</p><p>getHeader(“User-Agent”)</p><p>getCookies()</p><p>getRequestURI()</p><p>getRequestURL()</p><p>getContextPath()</p><p>getServletPath()</p><p>getPathInfo()</p><p>getQueryString()</p><p>isRequestedSessionIdFromCookie()</p><p>isRequestedSessionIdFromURL()</p><p>isRequestedSessionIdValid()</p><p>getLocalPort(),getRemotePort()</p><p>getRequestDispatcher(),setCharacterEncoding(),getInputStream()</p><p>4.session对象</p><p>session:</p><p>getId()</p><p>isNew()</p><p>invalidate()</p><p>setMaxInactiveInterval(10)</p><p>5.响应对象</p><p>response:</p><p>sendRedirect(“third.jsp”)</p><p>sendError(404, “400 Error!”)</p><p>6.应用对象</p><p>application:</p><p>log(“some body visit our website…”);</p><p>getMajorVersion()</p><p>getMinorVersion()</p><p>getServerInfo()</p><p>getRequestDispatcher(),getResourceAsStream(),getInitParameter()</p><p>pageContext:</p><p>getAttribute(“name”)</p><p>config:</p><p>getInitParameter(“classNo”)</p><p>getServletName()</p><p>page:</p><p>getClass()</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jdk环境变量配置</title>
      <link href="/2019/10/30/jdk-huan-jing-bian-liang-pei-zhi/"/>
      <url>/2019/10/30/jdk-huan-jing-bian-liang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK-开发环境配置"><a href="#JDK-开发环境配置" class="headerlink" title="JDK 开发环境配置"></a>JDK 开发环境配置</h1><p>在本章节中我们将为大家介绍如何搭建Java开发环境。</p><ul><li><a href="https://www.runoob.com/java/java-environment-setup.html#win-install" target="_blank" rel="noopener">Windows 上安装开发环境</a></li><li><a href="https://www.runoob.com/java/java-environment-setup.html#linux-install" target="_blank" rel="noopener">Linux 上安装开发环境</a></li><li><a href="https://www.runoob.com/java/java-environment-setup.html#eclipse-install" target="_blank" rel="noopener">安装 Eclipse 运行 Java</a></li></ul><hr><h2 id="window系统安装java"><a href="#window系统安装java" class="headerlink" title="window系统安装java"></a>window系统安装java</h2><h3 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h3><p>首先我们需要下载java开发工具包JDK，下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html，点击如下下载按钮：" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html，点击如下下载按钮：</a></p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-download.jpg" alt="img"></p><p>在下载页面中你需要选择接受许可，并根据自己的系统选择对应的版本，本文以 Window 64位系统为例：</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-download-1.jpg" alt="img"></p><p>下载后JDK的安装根据提示进行，还有安装JDK的时候也会安装JRE，一并安装就可以了。</p><p>安装JDK，安装过程中可以自定义安装目录等信息，例如我们选择安装目录为 <strong>C:\Program Files (x86)\Java\jdk1.8.0_91</strong>。</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>1.安装完成后，右击”我的电脑”，点击”属性”，选择”高级系统设置”；</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/win-java1.png" alt="img"></p><p>2.选择”高级”选项卡，点击”环境变量”；</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-win2.png" alt="img"></p><p>然后就会出现如下图所示的画面：</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-win3.png" alt="img"></p><blockquote><p><strong>注意：</strong>如果使用 1.5 以上版本的 JDK，不用设置 CLASSPATH 环境变量，也可以正常编译和运行 Java 程序。</p></blockquote><p>变量设置参数如下：</p><ul><li><p>变量名：<strong>JAVA_HOME</strong></p></li><li><p>变量值：<strong>C:\Program Files (x86)\Java\jdk1.8.0_91</strong>        // 要根据自己的实际路径配置</p></li><li><p>变量名：<strong>CLASSPATH</strong></p></li><li><p>变量值：<strong>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</strong>         //记得前面有个”.”</p></li><li><p>变量名：<strong>Path</strong></p></li><li><p>变量值：<strong>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</strong></p></li></ul><h3 id="JAVA-HOME-设置"><a href="#JAVA-HOME-设置" class="headerlink" title="JAVA_HOME 设置"></a>JAVA_HOME 设置</h3><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-win4.png" alt="img"></p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-win5.png" alt="img"></p><h3 id="PATH设置"><a href="#PATH设置" class="headerlink" title="PATH设置"></a>PATH设置</h3><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-win6.png" alt="img"></p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-win7.png" alt="img"></p><blockquote><p><strong>注意：</strong>在 Windows10 中，Path 变量里是分条显示的，我们需要将 <strong>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</strong> 分开添加，否则无法识别：</p><pre><code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/44A70696-B2E6-4055-B88F-7FC0222DCCA4.png" alt="img"></p><p>更多内容可参考：<a href="https://www.runoob.com/w3cnote/windows10-java-setup.html" target="_blank" rel="noopener">Windows 10 配置Java 环境变量</a></p></blockquote><h3 id="CLASSPATH-设置"><a href="#CLASSPATH-设置" class="headerlink" title="CLASSPATH 设置"></a>CLASSPATH 设置</h3><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-win8.png" alt="img"></p><p>这是 Java 的环境配置，配置完成后，你可以启动 Eclipse 来编写代码，它会自动完成java环境的配置。</p><h3 id="测试JDK是否安装成功"><a href="#测试JDK是否安装成功" class="headerlink" title="测试JDK是否安装成功"></a>测试JDK是否安装成功</h3><p>1、”开始”-&gt;”运行”，键入”cmd”；</p><p>2、键入命令: <strong>java -version</strong>、<strong>java</strong>、<strong>javac</strong> 几个命令，出现以下信息，说明环境变量配置成功；</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-win9.png" alt="img"></p><hr><h2 id="Linux，UNIX，Solaris，FreeBSD环境变量设置"><a href="#Linux，UNIX，Solaris，FreeBSD环境变量设置" class="headerlink" title="Linux，UNIX，Solaris，FreeBSD环境变量设置"></a>Linux，UNIX，Solaris，FreeBSD环境变量设置</h2><p>环境变量PATH应该设定为指向Java二进制文件安装的位置。如果设置遇到困难，请参考shell文档。</p><p>例如，假设你使用bash作为shell，你可以把下面的内容添加到你的 .bashrc文件结尾: export PATH=/path/to/java:$PATH</p><hr><h2 id="流行JAVA开发工具"><a href="#流行JAVA开发工具" class="headerlink" title="流行JAVA开发工具"></a>流行JAVA开发工具</h2><p>正所谓工欲善其事必先利其器，我们在开发java语言过程中同样需要一款不错的开发工具，目前市场上的IDE很多，本文为大家推荐以下下几款java开发工具：</p><ul><li><p><strong>Eclipse（推荐）:</strong>另一个免费开源的java IDE，下载地址： <a href="http://www.eclipse.org/downloads/packages/" target="_blank" rel="noopener">http://www.eclipse.org/downloads/packages/</a></p><p>选择 <strong>Eclipse IDE for Java Developers</strong>：<br><img src="https://www.runoob.com/wp-content/uploads/2013/12/5A92DEAE-EFB9-493D-AC4D-808E529B533C.jpg" alt="img"></p></li><li><p><strong>JetBrains</strong> 的 IDEA， 现在很多人开始使用了，功能很强大，下载地址：<a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download/</a></p></li><li><p><strong>Notepad++ :</strong> Notepad++ 是在微软视窗环境之下的一个免费的代码编辑器，下载地址：<a href="http://notepad-plus-plus.org/" target="_blank" rel="noopener"> http://notepad-plus-plus.org/</a></p></li><li><p><strong>Netbeans:</strong>开源免费的java IDE，下载地址： <a href="http://www.netbeans.org/index.html" target="_blank" rel="noopener">http://www.netbeans.org/index.html</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发环境搭配</title>
      <link href="/2019/10/30/an-zhuo-kai-fa-huan-jing-da-pei/"/>
      <url>/2019/10/30/an-zhuo-kai-fa-huan-jing-da-pei/</url>
      
        <content type="html"><![CDATA[<h2 id="1-2-开发环境搭建"><a href="#1-2-开发环境搭建" class="headerlink" title="1.2 开发环境搭建"></a>1.2 开发环境搭建</h2><h3 id="分类-Android-基础入门教程"><a href="#分类-Android-基础入门教程" class="headerlink" title="分类 Android 基础入门教程"></a><em>分类</em> <a href="https://www.runoob.com/w3cnote_genre/android" target="_blank" rel="noopener">Android 基础入门教程</a></h3><blockquote><p>现在主流的Android开发环境有: ①Eclipse + ADT + SDK ②Android Studio + SDK ③IntelliJ IDEA + SDK 现在国内大部分开发人员还是使用的Eclipse，而谷歌宣布不再更新ADT后，并且官网也去掉了集成Android开发环境的Eclipse下载链接，各种现象都表示开发者最后都终将过渡到Android Studio，当然这段过渡时间会很长，但如果你是刚学Android的话建议直接冲Android Studio着手；而且很多优秀的开源项目都是基于Android Studio！当然，在本教程中对两种开发环境都会进行一个介绍，用哪个取决与你自己~ 还有一个IntelliJ，和Android Studio差不多的，并不对此进行讲解！</p></blockquote><h2 id="1-JDK安装与配置"><a href="#1-JDK安装与配置" class="headerlink" title="1.JDK安装与配置"></a>1.JDK安装与配置</h2><blockquote><ul><li><strong>Step 1:下载JDK</strong> 可以到官网进行下载：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html" target="_blank" rel="noopener">Jdk官方下载</a> 也可到笔者网盘下载：<a href="http://pan.baidu.com/s/1o6LxZHC" target="_blank" rel="noopener">笔者网盘</a> PS:这个随便下一个都可以，关系不大，32位的只能下32位哦！</li><li><strong>Step 2:JDK安装</strong> 傻瓜式的下一步即可！</li><li><strong>Step 3:环境变量的配置</strong> 配置环境变量是为了方便我们一些命令行的操作，后续会用到！ <strong>右键我的电脑——&gt;高级——&gt;环境变量</strong> <img src="https://www.runoob.com/wp-content/uploads/2015/06/39936377.jpg" alt="Java环境变量配置1"> <strong>新建JAVA_HOME</strong> <img src="https://www.runoob.com/wp-content/uploads/2015/06/12299725.jpg" alt="新建JAVA_HOME"> <strong>修改PATH变量，别把原本的东西删掉！！！！</strong> <img src="https://www.runoob.com/wp-content/uploads/2015/06/80572641.jpg" alt="修改PATH变量"> <strong>新建CLASSPATH</strong> <img src="https://www.runoob.com/wp-content/uploads/2015/06/87557685.jpg" alt="新建CLASSPATH"> <strong>验证环境是否配置完成</strong> 打开电脑的cmd(命令行)，win键 + R输入cmd，然后在命令行依次javac和java，出现如图效果表示配置完成： <img src="https://www.runoob.com/wp-content/uploads/2015/06/40813475.jpg" alt="此处输入图片的描述"></li></ul></blockquote><hr><h2 id="2-开发工具二选一"><a href="#2-开发工具二选一" class="headerlink" title="2.开发工具二选一"></a>2.开发工具二选一</h2><blockquote><p>一开始也说了开发环境IDE的现状，另外前面忘记说一点:Android Studio是比较吃配置的，如果电脑不怎么好，建议还是先使用Eclipse进行Android开发，下面先说下我们熟悉IDE开发APP的流程，按照下述流程来熟悉IDE的使用：</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/06/62458334.jpg" alt="熟悉IDE开发APP的流程"></p><p>然后下面两个选一个，开始我们的Android开发之路吧！</p><p><strong>Eclipse + ADT + SDK：</strong> <strong>Android Studio + SDK：</strong></p></blockquote><hr><h2 id="3-相关术语的解析"><a href="#3-相关术语的解析" class="headerlink" title="3.相关术语的解析"></a>3.相关术语的解析</h2><blockquote><ol><li><strong>Dalvik：</strong> Android特有的虚拟机,和JVM不同,Dalvik虚拟机非常适合在移动终端上使用!</li><li><strong>AVD：</strong> (android virtual machine):安卓虚拟设备,就是安卓的模拟器</li><li><strong>ADT：</strong> (android development tools)安卓开发工具</li><li><strong>SDK：</strong>(software development kit)软件开发工具包,就是安卓系统,平台架构等的工具集合,如adb.exe</li><li><strong>DDMS：</strong>(dalvik debug monitor service)安卓调试工具</li><li><strong>adb：</strong>安卓调试桥,在sdk的platform-tools目录下,功能很多,命令行必备</li><li><strong>DX工具：</strong>将.class转换成.dex文件</li><li><strong>AAPT：</strong>(android asset packing tool),安卓资源打包工具</li><li><strong>R.java文件：</strong>由aapt工具根据App中的资源文件自动生成,可以理解为资源字典</li><li><strong>AndroidManifest.xml：</strong>app包名 + 组件声明 + 程序兼容的最低版本 + 所需权限等程序的配置文件</li></ol></blockquote><hr><p>后续内容对于初学者的你可能有点难度，但后面回头，你会发现这些东西很有用~ 看不懂的话，可以先跳过</p><h2 id="4-ADB命令行的一些指令"><a href="#4-ADB命令行的一些指令" class="headerlink" title="4.ADB命令行的一些指令"></a>4.ADB命令行的一些指令</h2><blockquote><p>执行ADB指令之前我们还需要为我们的SDK配置一下环境变量 <strong>Step 1:</strong>新建一个ANDROID_HOME的环境变量，把sdk根目录地址贴上去： <img src="https://www.runoob.com/wp-content/uploads/2015/06/4497768.jpg" alt="此处输入图片的描述"> <strong>Step 2:</strong>更新Path环境变量，在Paht开头加上：<strong>%ANDROID_HOME%\tools;</strong> 即可 配置完了，接下来就来学习指令了： <img src="https://www.runoob.com/wp-content/uploads/2015/06/95349283.jpg" alt="常用ADB指令"></p></blockquote><hr><h2 id="5-APP程序打包与安装的流程："><a href="#5-APP程序打包与安装的流程：" class="headerlink" title="5.APP程序打包与安装的流程："></a>5.APP程序打包与安装的流程：</h2><blockquote><p><img src="https://www.runoob.com/wp-content/uploads/2015/06/5918079.jpg" alt="APP程序打包与安装的流程"></p></blockquote><hr><h2 id="6-APP的安装过程："><a href="#6-APP的安装过程：" class="headerlink" title="6.APP的安装过程："></a>6.APP的安装过程：</h2><blockquote><p><img src="https://www.runoob.com/wp-content/uploads/2015/06/30239720.jpg" alt="APP的安装过程"></p></blockquote><h2 id="7-本节小结"><a href="#7-本节小结" class="headerlink" title="7.本节小结"></a>7.本节小结</h2><blockquote><p>本节我们对Android开发IDE的现状进行了分析，建议初学者硬件条件允许的话，使用Android Studio来进行Android APP的开发，讲述了JDK的安装与配置，以及熟悉IDE的流程，一些关键名称的解析，ADB命令行的常用指令，最后还有程序的打包安装和安装过程的解析！经过这章相信大家对Android开发有了个简单了解，了解开发一个程序的流程，以及对应的项目目录结构！相信大家会抱怨模拟器AVD跑得很慢，下节会给大家介绍一个比真机还快的Android模拟器——Genymotion的安装使用！</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA知识点总结</title>
      <link href="/2019/10/11/java-zhi-shi-dian-zong-jie/"/>
      <url>/2019/10/11/java-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="第二章面向对象"><a href="#第二章面向对象" class="headerlink" title="第二章面向对象"></a>第二章面向对象</h2><p>1.面向对象：面向对象思想就是把一个项目，一件事情分成更小的项目，每一部分负责什么功能，最后再有这些部分组合成一个整体。</p><p>2.类的创建</p><pre class=" language-java"><code class="language-java">    语法：<span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span><span class="token punctuation">}</span>​      File<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">new</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">class</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>类名</code></pre><p>​      </p><p>3.创建对象</p><pre><code>类名 对象名=new 类名();​      对象名.方法名(); 对象名.属性</code></pre><p>4.构造方法：方法名和类名相同,没有返回值</p><pre><code>     public class 类名{​         public 类名(){}//主要的做用是初始化操作​      }</code></pre><p>5.构造方法重载</p><p>（1）构造方法的重载：方法名与类名相同，参数列表不同</p><p>（2）方法的重载：在同一个类中包含了两个或者两个以上的方法，它们的方法名相同，方法的参数个数，顺序，类型不同，则称这个方法被重载了，这个过程称为方法的重载。</p><p>（3）构造方法的作用：用来实现多种初始化行为。</p><pre><code>    public class 类名{​         public 类名(){}​         public 类名(String name,int age){}​      }</code></pre><p>6.构造方法的执行</p><pre><code>     new 类名();---&gt;执行构造方法​      super();---&gt;执行了父类的构造方法</code></pre><p>7.static静态修饰符</p><p>   （1）含义：static可以用来修饰属性，方法，和代码块。static修饰的变量属于这个类所有，即由这个类创建的所有对象共用一个static变量。通常把static修饰的属性和方法称为类属性（也可以称为类变量），类方法。不使用static修饰的属性和方法属于单个对象，通常称为实例属性，实例方法。</p><p>（2）要点：</p><p>​    1.在加载类的过程中，完成静态变量的内存分配，再执行静态代码块，两者是在创建对象之前执行的。</p><p>​    2.类属性和类方法可以通过类名和对象名访问，实例属性和实例方法只能通过对象名访问。</p><p>​    3.类方法只能访问类属性和其他类方法，</p><p>注意：静态方法中不能使用this和super关键字。</p><p>8.java内存（栈和堆，static，方法区，gc（垃圾回收机制））</p><p>9.八种基本数据类型：</p><pre><code>    byte  short   int   long    float   double   Boolean   char</code></pre><h2 id="第三章面向对象三大特征—封装"><a href="#第三章面向对象三大特征—封装" class="headerlink" title="第三章面向对象三大特征—封装"></a>第三章面向对象三大特征—封装</h2><h3 id="第三章-面向对象三大特征—封装"><a href="#第三章-面向对象三大特征—封装" class="headerlink" title="第三章 面向对象三大特征—封装"></a>第三章 面向对象三大特征—封装</h3><p>1.封装的概念：封装是指将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部的信息，而是通过该类所提供的方法来实现对内部信息的操作访问。</p><p>2.封装的步骤</p><p>​      1.把属性私有化（private）</p><p>​      2.对这些属性设置get和set方法</p><p>​      3.调用处理这些方法</p><p>3.封装的作用与好处：</p><p>作用：避免一些用一些不合乎常理的操作</p><p>好处：</p><p>（1） 提高了安全性</p><p>（2） 提高了复用性</p><p>（3） 隐藏了实现细节</p><p>4.封装的案例:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 文件名: EncapTest.java */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncapTest</span><span class="token punctuation">{</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">private</span> String idNum<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>​      <span class="token keyword">return</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>​      <span class="token keyword">return</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> String <span class="token function">getIdNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>​      <span class="token keyword">return</span> idNum<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span> <span class="token keyword">int</span> newAge<span class="token punctuation">)</span><span class="token punctuation">{</span>​      age <span class="token operator">=</span> newAge<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String newName<span class="token punctuation">)</span><span class="token punctuation">{</span>​      name <span class="token operator">=</span> newName<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIdNum</span><span class="token punctuation">(</span> String newId<span class="token punctuation">)</span><span class="token punctuation">{</span>​      idNum <span class="token operator">=</span> newId<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* F文件名 : RunEncap.java */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunEncap</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>​      EncapTest encap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EncapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​      encap<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"James"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​      encap<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​      encap<span class="token punctuation">.</span><span class="token function">setIdNum</span><span class="token punctuation">(</span><span class="token string">"12343ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Name : "</span> <span class="token operator">+</span> encap<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> ​                             <span class="token string">" Age : "</span><span class="token operator">+</span> encap<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.修饰符</p><p>​      public—&gt;公共的：在一个项目中都可以访问，权限最高</p><p>​      private—&gt;私有的：只能在本类中进行访问，权限最低</p><p>​      protected—&gt;安全的，受保护的：同一个包能进行访问，继承中之类可以访问父类</p><p>​      default—&gt;默认的：同一个包能访问</p><h2 id="第四章-面向对象三大特征—继承"><a href="#第四章-面向对象三大特征—继承" class="headerlink" title="第四章 面向对象三大特征—继承"></a>第四章 面向对象三大特征—继承</h2><p>1.继承的概念：父亲儿子</p><p>2.继承的关键字：extends</p><p>3.继承的好处：</p><p>   （1）提高了代码的重用性</p><p>   （2）提高了代码的可扩展性</p><p>3.继承的语法：</p><pre><code>     public class 类名  extends 父类{    代码块   }</code></pre><p>4.继承的使用与说明：</p><p>   （1）使用：</p><p>可以直接调用父类的非私有属性和方法</p><p>​         可以用super.方法     super.属性</p><p>   （2）说明： Java中的继承只能单继承，</p><p>5.父类构造方法调用：super();</p><p>​     //super指代的是父类对象，this指代的是本类对象</p><p>​      调用父类的构造方法必须在之类中调用</p><p>​      必须实在之类构造方法的第一行代码</p><p>6.继承中的构造方法要点：</p><p>   （1）执行子类的构造方法，会默认执行父类的无参构造方法</p><p>  （2）当子类没有无参构造方法，但是有有参构造方法,子类的构造方法需手动添加</p><p>  （3）父类没有定义无参构造方法，定义了带参构造方法，子类的构造方法必须调用父类的带参构造方法。</p><p>  （4）无论是super还是this调用构造方法，只能放在第一行，构造方法只能调用一个</p><p>  （5）构造方法只能在构造方法中调用</p><p>7.重写@Override</p><p>​      必须继承</p><p>​      方法名一致，参数个数，顺序，类型全部一致</p><p>8.重载与重写的区别：</p><p>重载:一定发生在同一类中，方法名相同，参数不同（类型不同，数量不同）</p><p>重写：一定发生在父类和子类中，方法名相同，参数相同，方法体不同</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="第五章-面向对象—多态"><a href="#第五章-面向对象—多态" class="headerlink" title="第五章 面向对象—多态"></a>第五章 面向对象—多态</h2><p>1.多态的概念：不同对象对同一消息产生不同的响应。</p><p>2.多态的必要条件</p><p>   （1）继承</p><p>   （2）重写</p><p>   （3）父类引用指向子类对象（向上转型）</p><p>3.多态的优点：</p><p>   （1）消除类型之间的耦合关系</p><p>   （2）可替换性</p><p>   （3）可扩展性</p><p>   （4）接口性</p><p>   （5）灵活性</p><p>   （6）简化性</p><p>3.多态的使用</p><p>   （1）第一个例子</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>​         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>​            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"米饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​         <span class="token punctuation">}</span>​      <span class="token punctuation">}</span>​      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>​         <span class="token annotation punctuation">@Override</span>​         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>​            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"熬粥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​         <span class="token punctuation">}</span>​      <span class="token punctuation">}</span>​      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>​         <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>​            Father son<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​            son<span class="token punctuation">.</span><span class="token function">cooking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​         <span class="token punctuation">}</span>​      <span class="token punctuation">}</span></code></pre><p>   （2）第二个例子</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>​    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>​      <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 以 Cat 对象调用 show 方法</span>​      <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 以 Dog 对象调用 show 方法</span>​                ​      Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 向上转型  </span>​      a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 调用的是 Cat 的 eat</span>​      Cat c <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向下转型  </span>​      c<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用的是 Cat 的 work</span>  <span class="token punctuation">}</span>  ​            ​    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>Animal a<span class="token punctuation">)</span>  <span class="token punctuation">{</span>​      a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ​        <span class="token comment" spellcheck="true">// 类型判断</span>​        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 猫做的事情 </span>​            Cat c <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>a<span class="token punctuation">;</span>  ​            c<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ​        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 狗做的事情 </span>​            Dog c <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>a<span class="token punctuation">;</span>  ​            c<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ​        <span class="token punctuation">}</span>  ​    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  ​    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  ​    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ​        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ​    <span class="token punctuation">}</span>  ​    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ​        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抓老鼠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ​    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  ​    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ​        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ​    <span class="token punctuation">}</span>  ​    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ​        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ​    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p> 4.向上转型（子类向父类的转换）  </p><pre><code> 语法 ：​      &lt;父类型&gt;  &lt;引用变量名&gt; = new  &lt;子类型&gt;（）；​      例如：Animal an1=new Dog（）；</code></pre><p>5.向下转型（必须基于向上转型）</p><pre><code>    例如：Son son=(Son)father;</code></pre><p>6.注意：</p><p>   （1）属性无多态这个属性，只看“=”左边的类型</p><p>   （2）编译时，能“.”出来，能调用的看“=”左边</p><p>7.Instanceof运算符：</p><p>8.异常的处理（Try-catch-finally块）：</p><pre><code>语法：​      Try{​         代码块；}catch（Exception  e）{   代码块；}finally{   代码块；}</code></pre><p>注意：</p><p>（1） catch（Exception  e）一定放在所有catch块的最后</p><p>（2） finally{}块里面的代码一定会执行</p><p>结束的语句：</p><pre><code>   （1）return；   （2）system.exit（0）;</code></pre><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="第六章-抽象"><a href="#第六章-抽象" class="headerlink" title="第六章 抽象"></a>第六章 抽象</h2><p>1.抽象的概念:当一个类没有足够的信息去描述一个具体的对象，那么我们称之为抽象类。</p><p>2.抽象的关键字</p><p>​      abstract</p><p>​      可以修饰类，可以修饰方法</p><p>3.抽象类的作用：</p><p>   （1）抽象类是用来继承的</p><p>   （2）抽象类无法new出对象</p><p>4.抽象的用法</p><pre><code>     //抽象类​      public abstract class 类名{​         //抽象方法没有方法体​         public abstract void 方法名();   ​      }     //当父类是抽象类的时候，子类必须重写父类里面的抽象方法</code></pre><p>​     </p><p>5.final修饰符：最终的</p><p>   修饰变量，修饰方法，修饰类</p><p>   （1）.当修饰变量时，变量转换成常量，常量的值不能改变</p><p>​      final int a=18;//a=18;不能改变,必须给一个初始值</p><p>   （2）.当修饰方法时，该方法不能被重写</p><p>   （3）.当修饰类时，该类不能被继承</p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h2 id="第七章-接口"><a href="#第七章-接口" class="headerlink" title="第七章 接口"></a>第七章 接口</h2><p>为什么要用接口？：因为JAVA只支持单继承。</p><ol><li>接口的概念</li></ol><p>2.接口的关键字</p><p>​      interface</p><p>3.接口的语法</p><pre><code>      public interface 接口名{}​      File---&gt;new---&gt;interface//创建接口</code></pre><p>4.接口的用法</p><pre><code>      实现接口的关键字  implements​      public interface 接口名{​         //接口是纯抽象类​         //接口里面的方法都是抽象方法​         void setData();​      }​      public class Play implements 接口名{​         @Override​         void setData(){​         }​      }​      public class Test {​         public static void main(String[] args) {​            Play play=new Play();​            play.setData();​         }​      }​      注意接口可以进行多继承​      public interface 接口名 extends 接口名，接口名{}​      一般用法​      public class 类名 extends 父类 implements 接口，接口{}</code></pre><p>多态与接口的区别：</p><p>（1） 多态：难</p><p>（2） 接口：简单，不能随意定义属性和方法，只能定义抽象方法，并且实现对口必须重写。</p><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><h2 id="第八章-集合框架"><a href="#第八章-集合框架" class="headerlink" title="第八章 集合框架"></a>第八章 集合框架</h2><p>1.ArrayList</p><p>  1.用法</p><pre><code>     ArrayList list=new ArrayList();    list.add();//添加数据    list.get();//获取数据</code></pre><p>2.Map的用法：</p><pre><code>       Map map=new HasMap();​      map.put(key,value);//key不能重复​      map.get(key);//获取key对象的value</code></pre><p>3.泛型</p><pre><code>      ArrayList&lt;String&gt; list=new ArrayList&gt;&lt;String&gt;();      Map&lt;String,String&gt; map=new HasMap&lt;String,String&gt;();      ArrayList&lt;Map&lt;String,String&gt;&gt; list=new ArrayList&gt;&lt;Map&lt;String,String&gt;&gt;();</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
